@using Microsoft.AspNetCore.Mvc.ModelBinding
@using System.Collections.ObjectModel

@rendermode InteractiveServer
@inject CalendarDataService CalendarService


<div class="calendar-month-layout section-10">
    <div class="month">
        <div>
            @* These arrows will change the months *@
            <span class="calendar-arrow-icon arrow-left icon-size icon" @onclick="@((e) => {  CalendarService.setMonthsAway(-1, isFirstCalendar); })"/>
            <span>@CalendarDisplayInfo.monthName <span>@CalendarDisplayInfo.year</span> </span>
            <span class="calendar-arrow-icon arrow-right icon-size icon" @onclick="@((e) => {  CalendarService.setMonthsAway(1, isFirstCalendar); })" />
        </div>
    </div>

    <ul class="weekdays">
        <li id="0">Sun</li>
        <li id="1">Mon</li>
        <li id="2">Tue</li>
        <li id="3">Wed</li>
        <li id="4">Thu</li>
        <li id="5">Fri</li>
        <li id="6">Sat</li>        
    </ul>

    <ul class="days">
        @* Month List *@
        @{foreach(CalendarDataService.CalendarDayDetails item in CalendarDisplayInfo.monthView) {
            @if(item.Date.Month != CalendarDisplayInfo.month) {
                <li
                    class="day @(selectedDate == item.Date.ToShortDateString() ? "selected-date" : "")"
                    id="@(item.Date.ToShortDateString())"
                    @onclick="@( (e) => {CalendarService.setSelectedDate(item.Date.ToShortDateString());  } )"
                >
                    @* Display the events in the mouse tooltip *@
                    @if(events.Any(n =>  n.Date.ToShortDateString() == item.Date.ToShortDateString() )  ) {
                        <div class="event-tooltip">
                            @foreach(var gathering in item.dayEvents.Select((value, index) => new {value, index}) ) {
                                <div class="tooltip-text">@gathering.value.Name</div>
                                @* Only display the first three events *@
                                @if(gathering.index > 1) {
                                    <div class="tooltip-text">...</div>
                                    break;
                                }
                            }
                        </div>
                    }

                    <div class="day-container h-100 w-100 ">
                        <span class="@(item.Date.Month != CalendarDisplayInfo.month ? "outsideMonth" : "")  @( currentDate == item.Date.ToShortDateString() ? "active" : "") " >
                            @item.Date.Day
                        </span>

                        @if(events.Any(n =>  n.Date.ToShortDateString() == item.Date.ToShortDateString() )  ) {
                            <div class="event-marker">
                                &#11044;
                            </div>
                        }
                    </div>
                </li>
            }
            else {
                <li
                    class="day @(selectedDate == item.Date.ToShortDateString() ? "selected-date" : "")"
                    id="@(item.Date.ToShortDateString())"
                    @onclick="@( (e) => {CalendarService.setSelectedDate(item.Date.ToShortDateString());  } )"
                >
                    @* Display the events in the mouse tooltip *@
                    @if(events.Any(n =>  n.Date.ToShortDateString() == item.Date.ToShortDateString() )  ) {
                        <div class="event-tooltip">
                            @foreach(var gathering in item.dayEvents.Select((value, index) => new {value, index}) ) {
                                <div class="tooltip-text">@gathering.value.Name</div>
                                @* Only display the first three events *@
                                @if(gathering.index > 1) {
                                    <div class="tooltip-text">...</div>
                                    break;
                                }
                            }
                        </div>
                    }

                    <div class="day-container h-100 w-100 ">
                        <span class="@( currentDate == item.Date.ToShortDateString() ? "active" : "") @(item.Date.DayOfWeek == DayOfWeek.Saturday ? "weekend" : "") @(item.Date.DayOfWeek == DayOfWeek.Sunday ? "weekend" : "") " >
                            @item.Date.Day
                        </span>

                        @if(events.Any(n =>  n.Date.ToShortDateString() == item.Date.ToShortDateString() )  ) {
                            <div class="event-marker">
                                &#11044;
                            </div>
                        }
                    </div>
                </li>
            }    
        }}

    </ul>
</div>


@code {

    [Parameter]
    public bool isFirstCalendar { get; set; }

    protected string selectedDate = "";

    // Current Day value
    protected string currentDate = DateTime.Now.ToShortDateString();

    // ----------- Calendar Values ----------- 
	List<CalendarDataService.CalendarEvents> events = new List<CalendarDataService.CalendarEvents>();

    protected List<CalendarDataService.CalendarDayDetails> monthView = new List<CalendarDataService.CalendarDayDetails>();

    public required CalendarDataService.CalendarLayoutInfo CalendarDisplayInfo { get; set; }

    // ------------------- Functions ------------------- 

	protected override void OnInitialized() {
        // Compile all the events for the viewable time period - in Testing mode, so using more than the selectedDay range
		events.Add(new CalendarDataService.CalendarEvents(new DateTime(2025, 10, 2), "Test day 1", "venue-event"));
		events.Add(new CalendarDataService.CalendarEvents(new DateTime(2025, 10, 31), "Test day 2", "holiday"));
		events.Add(new CalendarDataService.CalendarEvents(new DateTime(2025, 10, 25), "Christmas", "birthday"));
		events.Add(new CalendarDataService.CalendarEvents(new DateTime(2025, 10, 1), "New Years", "important-event"));
        
        events.Add(new CalendarDataService.CalendarEvents(new DateTime(2025, 10, 2), "Test day 3", "venue-event"));
		events.Add(new CalendarDataService.CalendarEvents(new DateTime(2025, 10, 30), "Test day 4", "holiday"));
		events.Add(new CalendarDataService.CalendarEvents(new DateTime(2025, 10, 12), "Test Day 5", "birthday"));
		events.Add(new CalendarDataService.CalendarEvents(new DateTime(2025, 10, 16), "Test Day 6", "important-event"));

        // Create the calendar
        CalendarDisplayInfo = CalendarService.generateCalendarLayout(isFirstCalendar);

        // Set the values from the Data Service - selectedDate
        CalendarService.selectedDateChange += selectedDateChanged;
        CalendarService.setSelectedDate(currentDate);
        selectedDate = CalendarService.onSelectedDateChange();

        // Get the events
        events = CalendarService.getEventsCalendar();

        CalendarService.monthsAwayChange += currentMonthChanged;
	}

    // Event Checker for the selectedDate value in the Calendar Service
    private async void selectedDateChanged(object? sender, string value) {
        await InvokeAsync(() => {
            selectedDate = CalendarService.onSelectedDateChange();
            StateHasChanged();
        });
    }

   // Event Checker for the monthsAway value in the Calendar Service
    private async void currentMonthChanged(object? sender, int value) {
        await InvokeAsync(() => {
            CalendarDisplayInfo = CalendarService.generateCalendarLayout(isFirstCalendar);
            StateHasChanged();
        });
    }
}