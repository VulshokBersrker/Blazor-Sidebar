@rendermode InteractiveServer
@inject CalendarDataService CalendarService


<div class="section-10">
    <div class="month">
        <div>
            @* These arrows will change the months *@
            <span class="calendar-arrow-icon arrow-left icon-size icon" @onclick="@((e) => {  CalendarService.setMonthsAway(-1, isFirstCalendar); })"/>
            <span>@CalendarDisplayInfo.monthName <span>@CalendarDisplayInfo.year</span> </span>
            <span class="calendar-arrow-icon arrow-right icon-size icon" @onclick="@((e) => {  CalendarService.setMonthsAway(1, isFirstCalendar); })" />
        </div>
    </div>

    <ul class="weekdays">
        <li id="0">Sun</li>
        <li id="1">Mon</li>
        <li id="2">Tue</li>
        <li id="3">Wed</li>
        <li id="4">Thu</li>
        <li id="5">Fri</li>
        <li id="6">Sat</li>        
    </ul>

    <ul class="days">
        @* Month List *@
        @{foreach(CalendarDataService.CalendarDayDetails item in CalendarDisplayInfo.monthView) {
            @if(item.Date.Month != CalendarDisplayInfo.month) {
                <li
                    class="day @(selectedDate == item.Date.ToShortDateString() ? "selected-date" : "")"
                    id="@(item.Date.ToShortDateString())"
                    @onclick="@( (e) => {CalendarService.setSelectedDate(item.Date.ToShortDateString());  } )"
                >
                    @* Display the events in the mouse tooltip *@
                    @if(item.numEvents != 0 ) {
                        <div class="event-tooltip">
                            @foreach(var gathering in item.dayEvents.Select((value, index) => new {value, index}) ) {
                                <div class="tooltip-text">@gathering.value.Name</div>
                                @* Only display the first three events *@
                                @if(gathering.index > 1) {
                                    <div class="tooltip-text">...</div>
                                    break;
                                }
                            }
                        </div>
                    }

                    @* The number of the Date *@
                    <div class="day-container h-100 w-100 ">
                        <span class="date @(item.Date.Month != CalendarDisplayInfo.month ? "outsideMonth" : "")  @( currentDate == item.Date.ToShortDateString() ? "active" : "") " >@item.Date.Day</span>

                        @* Show if there is an event on this day, generate up to 3 dots for the events, then a plus to show there are more events *@
                        <div class="event-marker">
                            @foreach(var gathering in item.dayEvents.Select((value, index) => new {value, index}) ) {
                                <span class="dot @(gathering.value.eventType == "holiday" ? "holiday-event" : "") 
                                    @(gathering.value.eventType == "venue-event" ? "venue-event" : "")
                                    @(gathering.value.eventType == "birthday" ? "birthday-event" : "")
                                    @(gathering.value.eventType == "company-event" ? "company-event" : "")
                                    @(gathering.value.eventType == "important-event" ? "important-event" : "")
                                    "
                                >&#11044; </span>
                                @* Only display the first three events *@
                                @if(gathering.index == 2) {
                                    <span class="event-overflow">+</span>
                                    break;
                                }
                            }
                        </div>
                    </div>
                </li>
            }
            else {
                <li
                    class="day @(selectedDate == item.Date.ToShortDateString() ? "selected-date" : "")"
                    id="@(item.Date.ToShortDateString())"
                    @onclick="@( (e) => {CalendarService.setSelectedDate(item.Date.ToShortDateString());  } )"
                >
                    @* Display the events in the mouse tooltip *@
                    @if(item.numEvents != 0 ) {
                        <div class="event-tooltip">
                            @foreach(var gathering in item.dayEvents.Select((value, index) => new {value, index}) ) {
                                <div class="tooltip-text">@gathering.value.Name</div>
                                @* Only display the first three events *@
                                @if(gathering.index > 1) {
                                    <div class="tooltip-text">...</div>
                                    break;
                                }
                            }
                        </div>
                    }

                    @* The number of the Date *@
                    <div class="day-container h-100 w-100">
                        <span class="date @( currentDate == item.Date.ToShortDateString() ? "active" : "") @(item.Date.DayOfWeek == DayOfWeek.Saturday ? "weekend" : "") @(item.Date.DayOfWeek == DayOfWeek.Sunday ? "weekend" : "") " >@item.Date.Day</span>

                        @* Show if there is an event on this day, generate up to 3 dots for the events, then a plus to show there are more events *@
                        <div class="event-marker">
                            @foreach(var gathering in item.dayEvents.Select((value, index) => new {value, index}) ) {
                                <span class="dot @(gathering.value.eventType == "holiday" ? "holiday-event" : "") 
                                    @(gathering.value.eventType == "venue-event" ? "venue-event" : "")
                                    @(gathering.value.eventType == "birthday" ? "birthday-event" : "")
                                    @(gathering.value.eventType == "company-event" ? "company-event" : "")
                                    @(gathering.value.eventType == "important-event" ? "important-event" : "")
                                    "
                                >&#11044; </span>
                                @* Only display the first three events *@
                                @if(gathering.index == 2) {
                                    <span class="event-overflow">+</span>
                                    break;
                                }
                            }
                        </div>
                    </div>
                </li>
            }    
        }}
    </ul>
</div>


@code {

    [Parameter]
    public bool isFirstCalendar { get; set; }

    protected string selectedDate = "";

    // Current Day value
    protected string currentDate = DateTime.Now.ToShortDateString();

    // ----------- Calendar Values ----------- 

    public required CalendarDataService.CalendarLayoutInfo CalendarDisplayInfo { get; set; }

    // ------------------- Functions ------------------- 

	protected override void OnInitialized() {

        // Create the calendar
        CalendarDisplayInfo = CalendarService.generateCalendarLayout(isFirstCalendar);

        // Set the values from the Data Service - selectedDate
        CalendarService.selectedDateChange += selectedDateChanged;
        CalendarService.setSelectedDate(currentDate);
        selectedDate = CalendarService.onSelectedDateChange();


        CalendarService.monthsAwayChange += currentMonthChanged;
	}

    // Event Checker for the selectedDate value in the Calendar Service
    private async void selectedDateChanged(object? sender, string value) {
        await InvokeAsync(() => {
            selectedDate = CalendarService.onSelectedDateChange();
            StateHasChanged();
        });
    }

   // Event Checker for the monthsAway value in the Calendar Service
    private async void currentMonthChanged(object? sender, int value) {
        await InvokeAsync(() => {
            CalendarDisplayInfo = CalendarService.generateCalendarLayout(isFirstCalendar);
            StateHasChanged();
        });
    }
}