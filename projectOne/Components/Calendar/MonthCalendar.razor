@using System.Globalization
@rendermode InteractiveServer


<div class="calendar-month-layout section-10">
    <div class="month">
        <div>
            @* These arrows will change the months *@
            <span class="calendar-arrow-icon arrow-left icon-size icon" @onclick="@(() => { monthsAway--; CreateCalendar(); })"/>
            <span>@monthName <span>@year</span> </span>
            <span class="calendar-arrow-icon arrow-right icon-size icon" @onclick="@(() => { monthsAway++; CreateCalendar(); })" />
        </div>
    </div>

    <ul class="weekdays">
        <li id="0">Sun</li>
        <li id="1">Mon</li>
        <li id="2">Tue</li>
        <li id="3">Wed</li>
        <li id="4">Thu</li>
        <li id="5">Fri</li>
        <li id="6">Sat</li>        
    </ul>

    <ul class="days">

        @* Month List *@
        @{foreach(CalendarDayDetails item in monthView) {
            @if(item.Date.Month != month) {
                <li
                    class="day @(selectedDate == item.Date.ToShortDateString() ? "selected-date" : "")"
                    id="@(item.Date.ToShortDateString())"
                    @onclick="@( (e) => changeSelectedDate(item.Date.ToShortDateString()) )"
                >
                    <span class=" @(item.Date.Month != month ? "outsideMonth" : "")
                        @( currentDate == item.Date.ToShortDateString() ? "active" : "")
                    "
                    >
                    @item.Date.Day </span>
                </li>
            }
            else {
                <li
                    class="day @(selectedDate == item.Date.ToShortDateString() ? "selected-date" : "")"
                    id="@(item.Date.ToShortDateString())"
                    @onclick="@( (e) => changeSelectedDate(item.Date.ToShortDateString()) )"
                >
                    <span class=" @( currentDate == item.Date.ToShortDateString() ? "active" : "") 
                        @(item.Date.DayOfWeek == DayOfWeek.Saturday ? "weekend" : "") 
                        @(item.Date.DayOfWeek == DayOfWeek.Sunday ? "weekend" : "")
                    "
                    >
                    @item.Date.Day </span>
                </li>
            }    
        }}

    </ul>
</div>


@code {

    [Parameter]
    public bool isFirstCalendar { get; set; }

    protected string selectedDate = "";

    @* Current Day value *@
    protected string currentDate = DateTime.Now.ToShortDateString();
    
    // Calendar Event Type
    protected record CalendarEvents(DateTime Date, string Name, string eventType);

    // ----------- Calendar Values ----------- 
    protected string monthName = "";
	DateTime monthEnd;
	protected int monthsAway = 0;
	protected int year = 0;
	protected int month = 0;
	List<CalendarEvents> events = new List<CalendarEvents>();


    protected record CalendarDayDetails(DateTime Date, int numEvents);

    protected List<CalendarDayDetails> monthView = new List<CalendarDayDetails>();



    // ------------------- Functions ------------------- 

	protected override void OnInitialized() {
        // Compile all the events for the viewable time period - in Testing mode, so using more than the selectedDay range
		events.Add(new CalendarEvents(new DateTime(2025, 9, 21), "Test day 1", "venue-event"));
		events.Add(new CalendarEvents(new DateTime(2025, 8, 31), "Test day 2", "holiday"));
		events.Add(new CalendarEvents(new DateTime(2025, 9, 25), "Christmas", "birthday"));
		events.Add(new CalendarEvents(new DateTime(2025, 10, 1), "New Years", "important-event"));
        
        events.Add(new CalendarEvents(new DateTime(2025, 9, 21), "Test day 3", "venue-event"));
		events.Add(new CalendarEvents(new DateTime(2025, 9, 30), "Test day 4", "holiday"));
		events.Add(new CalendarEvents(new DateTime(2025, 9, 12), "Test Day 5", "birthday"));
		events.Add(new CalendarEvents(new DateTime(2025, 9, 16), "Test Day 6", "important-event"));

        if(isFirstCalendar == false) {
            monthsAway++;
        }

        // Create the calendars
		CreateCalendar();

        testtt();

        selectedDate = currentDate;


	}

    // Create and Update the First Calendar
	protected void CreateCalendar() {
        // Clear the list to keep the formatting correct
        monthView.Clear();

        // Create a temp data to get the month and year
        DateTime tempDate = DateTime.Now.AddMonths(monthsAway);
        month = tempDate.Month;
        year = tempDate.Year;

        // Set the start and end days for the month
        DateTime monthStart = new DateTime(year, month, 1);
        monthEnd = monthStart.AddMonths(1).AddDays(-1);
        monthName = monthStart.Month switch
        {
            1 => "January",
            2 => "February",
            3 => "March",
            4 => "April",
            5 => "May",
            6 => "June",
            7 => "July",
            8 => "August",
            9 => "September",
            10 => "October",
            11 => "November",
            12 => "December",
            _ => ""
        };


        // ---- This Section is for the days that will appear on the calendar outside the current month ---- 
        

        // Previous Month Section

        // Get the previous month values
        int prevMonthLastDay = DateTime.DaysInMonth( monthEnd.AddMonths(-1).Year , monthEnd.AddMonths(-1).Month );
        DateTime temp = new DateTime(monthEnd.AddMonths(-1).Year , monthEnd.AddMonths(-1).Month, prevMonthLastDay);
        // Now set the values
        for (int i = 0; i <= (int)temp.DayOfWeek; i++)
        {
            monthView.Add(new CalendarDayDetails(new DateTime(monthEnd.AddMonths(-1).Year, monthEnd.AddMonths(-1).Month, (prevMonthLastDay - i ) ), 0));
        }
        
        // Current Month
        for (int i = 1; i <= DateTime.DaysInMonth(year, month); i++)
        {
            monthView.Add(new CalendarDayDetails(new DateTime(year, month, i ), 0));
        }

        // Next Month Section
        // Get the next month values
        int nextMonthLastDayName = (int)new DateTime(monthEnd.AddMonths(1).Year , monthEnd.AddMonths(1).Month, 1).DayOfWeek;
        // Now set the values
        for (int i = 0; i < (14 - nextMonthLastDayName) ; i++)
        {
            // Stop the list from getting longer than 6 weeks (42 days)
            if(monthView.Count() >= 42) { break; }
            monthView.Add(new CalendarDayDetails(new DateTime(monthEnd.AddMonths(1).Year, monthEnd.AddMonths(1).Month, ( i + 1 ) ), 0));
        }
	}


    protected void testtt() {
        // Create a temp data to get the month and year
		DateTime tempDate = DateTime.Now.AddMonths(monthsAway);
		int month_t = tempDate.Month;
		int year_t = tempDate.Year;

        // Set the start and end days for the month
		DateTime monthStart = new DateTime(year, month, 1);
		DateTime monthEnd_t = monthStart.AddMonths(1).AddDays(-1);
		string monthName_t = monthStart.Month switch {
			1 => "January",
			2 => "February",
			3 => "March",
			4 => "April",
			5 => "May",
			6 => "June",
			7 => "July",
			8 => "August",
			9 => "September",
			10 => "October",
			11 => "November",
			12 => "December",
			_ => ""
		};

        GregorianCalendar newww = new GregorianCalendar();
        @* Console.WriteLine(newww.GetMonth(DateTime.Now) + " / " + newww.GetDayOfMonth(DateTime.Now) + " / " + newww.GetYear(DateTime.Now));
        Console.WriteLine(newww.GetEra(DateTime.Now) );
        Console.WriteLine(); *@


    }
    // Changes the selected Date from the string gotten from the element
    protected void changeSelectedDate(string value) {
        @* Console.WriteLine(value); *@
        selectedDate = value;
        // Update the forecast details for the new selected date range
       
    }

}