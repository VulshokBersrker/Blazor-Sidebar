@using Microsoft.Extensions.WebEncoders.Testing
@rendermode InteractiveServer


<div class="grid-20">

    @* Calendars *@
    <div class="section-5 grid-10">
        @* First Calendar *@
        <div class="calendar-month-layout section-10">
            <div class="month">
                <div>
                    @* These arrows will change the months *@
                    <span class="calendar-arrow-icon arrow-left icon-size icon" @onclick="@(() => { monthsAway--; CreateFirstCalendar(); })"/>
                    <span>@monthName <span>@year</span> </span>
                    <span class="calendar-arrow-icon arrow-right icon-size icon" @onclick="@(() => { monthsAway++; CreateFirstCalendar(); })" />
                </div>
            </div>

            <ul class="weekdays">
                <li id="0">Sun</li>
                <li id="1">Mon</li>
                <li id="2">Tue</li>
                <li id="3">Wed</li>
                <li id="4">Thu</li>
                <li id="5">Fri</li>
                <li id="6">Sat</li>        
            </ul>

            <ul class="days">
                @* Previous Month *@
                @{for(int i = prevMonthDays.Length - 1; i >= 0; i--) {
                        @if(prevMonthDays[i] != 0) {
                            string date = ((month - 1) + "/" + prevMonthDays[i] + "/" + year);
                            string dateSepcial = 12 + "/" + prevMonthDays[i] + "/" + (year - 1);
                            @* var calendarItem = events.FirstOrDefault(n => n.Date == new DateTime(year, month, 1)); *@

                            // Error handling for January
                            @* if(month - 1 == 0) {  calendarItem = events.FirstOrDefault(n => n.Date == new DateTime(year - 1, 12, prevMonthDays[i])); }
                            else { calendarItem = events.FirstOrDefault(n => n.Date == new DateTime(year, month - 1, prevMonthDays[i])); } *@

                            
                            @* Error handling for January *@
                            @if(month - 1 == 0) {
                                <li
                                    class="day @(selectedDate == dateSepcial ? "selected-date" : "")"
                                    id="@(dateSepcial)"
                                    @onclick="@( (e) => changeSelectedDate(dateSepcial) )"
                                >
                                    <span class="outsideMonth @(currentDate == dateSepcial ? "active" : "")">@prevMonthDays[i]</span>
                                    @* @if (calendarItem != null) {
                                        <span class="hidden">@calendarItem.Name</span>
                                    } *@
                                </li>
                            }
                            else {
                                <li
                                    class="day @(selectedDate == date ? "selected-date" : "")"
                                    id="@(date)"
                                    @onclick="@( (e) => changeSelectedDate(date) )"
                                >
                                    <span class="outsideMonth @(currentDate == date ? "active" : "")">@prevMonthDays[i]</span>
                                    @* @if (calendarItem != null) {
                                        <span class="h">@calendarItem.Name</span>
                                    } *@
                                </li>
                            }                            
                        }
                    }
                }

                @* Current Month *@
                @{for (int i = 1; i <= monthEnd.Day; i++) {
                    @* var calendarItem = events.FirstOrDefault(n => n.Date == new DateTime(year, month, i)); *@
                    string date = (month + "/" + i + "/" + year);

                        <li
                            class="day @(selectedDate == date ? "selected-date" : "")"
                            id="@(date)"
                            @onclick="@( (e) => changeSelectedDate(date) )"
                        >
                            <span
                                class="@( currentDate == date ? "active" : "") 
                                @(DateTime.ParseExact(date, "d", null).DayOfWeek == DayOfWeek.Saturday ? "weekend" : "") 
                                @(DateTime.ParseExact(date, "d", null).DayOfWeek == DayOfWeek.Sunday ? "weekend" : "")
                                "
                            >
                                @i
                            </span>
                            @* @if (calendarItem != null) {
                                <ul class="event-container border">
                                    <li class="@calendarItem.eventType" />
                                    <li class="@calendarItem.eventType" />
                                </ul>
                                
                                <span class="h">@calendarItem.Name</span>
                            } *@
                        </li>                    
                    }
                }

                @* Next Month *@
                @{for(int i = 0; i < nextMonthDays_S.Length; i++) {
                        @if(nextMonthDays[i] != 0 && (calendarLength + i < 42)) {
                            string date = (month + 1) + "/" + nextMonthDays[i] + "/" + year;
                            string dateSpecial = 1 + "/" + nextMonthDays[i] + "/" + (year + 1);
                            @* var calendarItem = events.FirstOrDefault(n => n.Date == new DateTime(year, month, 1) ); *@
                            
                            // Error handling for December
                            @* if(month + 1 == 13) { calendarItem = events.FirstOrDefault(n => n.Date == new DateTime(year + 1, 1, nextMonthDays[i])); }
                            else { calendarItem = events.FirstOrDefault(n => n.Date == new DateTime(year, month + 1, nextMonthDays[i])); } *@

                            if(month + 1 == 13) {
                                <li
                                    class="day @(selectedDate == dateSpecial ? "selected-date" : "")"
                                    id="@(dateSpecial)"
                                    @onclick="@( () => changeSelectedDate(dateSpecial) )"
                                >
                                    <span class="outsideMonth @(currentDate == dateSpecial ? "active" : "")">@nextMonthDays[i]</span>
                                    @* @if (calendarItem != null) {
                                        <span class="h">@calendarItem.Name</span>
                                    } *@
                                </li>
                            }
                            else {
                                <li
                                    class="day @(selectedDate == date ? "selected-date" : "")"
                                    id="@(date)"
                                    @onclick="@( () => changeSelectedDate(date) )"
                                >
                                    <span class="outsideMonth @(currentDate == date ? "active" : "")">@nextMonthDays[i]</span>
                                    @* @if (calendarItem != null) {
                                        <ul class="event-container">
                                            <li class="@calendarItem.eventType" />
                                            <li class="@calendarItem.eventType" />
                                        </ul>

                                        <span class="h">@calendarItem.Name</span>
                                    } *@
                                </li>
                            }
                            
                        }
                    }
                }
            </ul>
        </div>


        @* Second Calendar - Needs to be updated to show the next month at start, plus separate values, or separate components? *@
        @* Calendar currently share states/data, will update when either do *@
        <div class="calendar-month-layout section-10">
            <div class="month">
                <div>
                    @* These arrows will change the months *@
                    <span class="calendar-arrow-icon arrow-left icon-size icon" @onclick="@(() => { monthsAway_S--; CreateSecondCalendar(); })"/>
                    <span>@monthName_S <span>@year_S</span> </span>
                    <span class="calendar-arrow-icon arrow-right icon-size icon" @onclick="@(() => { monthsAway_S++; CreateSecondCalendar(); })" />
                </div>
            </div>

            <ul class="weekdays">
                <li id="0">Sun</li>
                <li id="1">Mon</li>
                <li id="2">Tue</li>
                <li id="3">Wed</li>
                <li id="4">Thu</li>
                <li id="5">Fri</li>
                <li id="6">Sat</li>        
            </ul>

            <ul class="days">
                @* Previous Month *@
                @{for(int i = prevMonthDays_S.Length - 1; i >= 0; i--) {
                        @if(prevMonthDays_S[i] != 0) {
                            string date = ((month_S - 1) + "/" + prevMonthDays_S[i] + "/" + year_S);
                            string dateSpecial = 12 + "/" + prevMonthDays_S[i] + "/" + (year_S - 1);
                            @* var calendarItem = events.FirstOrDefault(n => n.Date == new DateTime(year, month, 1)); *@

                            // Error handling for January
                            @* if(month - 1 == 0) {  calendarItem = events.FirstOrDefault(n => n.Date == new DateTime(year - 1, 12, prevMonthDays[i])); }
                            else { calendarItem = events.FirstOrDefault(n => n.Date == new DateTime(year, month - 1, prevMonthDays[i])); } *@

                           
                            @* Error handling for January *@
                            @if(month_S - 1 == 0) {
                                <li
                                    class="day @(selectedDate == dateSpecial ? "selected-date" : "")"
                                    id="@(dateSpecial)"
                                    @onclick="@( () => changeSelectedDate(dateSpecial) )"
                                >
                                    <span class="outsideMonth @(currentDate == dateSpecial ? "active" : "")">@prevMonthDays_S[i]</span>
                                    @* @if (calendarItem != null) {
                                        <span class="hidden">@calendarItem.Name</span>
                                    } *@
                                </li>
                            }
                            else {
                                <li
                                    class="day @(selectedDate == date ? "selected-date" : "")"
                                    id="@(date)"
                                    @onclick="@( () => changeSelectedDate(date) )"
                                >
                                    <span class="outsideMonth @(currentDate == date ? "active" : "")" >
                                        @prevMonthDays_S[i]
                                    </span>
                                    @* @if (calendarItem != null) {
                                        <span class="h">@calendarItem.Name</span>
                                    } *@
                                </li>
                            }
                        }
                    }
                }

                @* Current Month *@
                @{for (int i = 1; i <= monthEnd_S.Day; i++) {
                    @* var calendarItem = events.FirstOrDefault(n => n.Date == new DateTime(year, month, i)); *@
                    string date = (month_S + "/" + i + "/" + year_S);
                    
                        <li
                            class="day @(selectedDate == date ? "selected-date" : "")"
                            id="@(month_S  + "/" + i + "/" + year_S)"
                            @onclick="@( () => changeSelectedDate(date) )"
                        >
                            <span class="@( currentDate == date ? "active" : "") 
                                @(DateTime.ParseExact(date, "d", null).DayOfWeek == DayOfWeek.Saturday ? "weekend" : "") 
                                @(DateTime.ParseExact(date, "d", null).DayOfWeek == DayOfWeek.Sunday ? "weekend" : "")
                                "
                            >
                                @i
                            </span>
                            @* @if (calendarItem != null) {
                                <ul class="event-container">
                                    <li class="@calendarItem.eventType" > </li>
                                    <li class="@calendarItem.eventType" />
                                </ul>
                            } *@
                        </li>
                    }
                }
                
                @* Next Month *@
                @{for(int i = 0; i < nextMonthDays_S.Length; i++) {
                        @if(nextMonthDays_S[i] != 0 && (calendarLength_S + i < 42)) {
                            @* var calendarItem = events.FirstOrDefault(n => n.Date == new DateTime(year, month, 1) ); *@
                            string date = ((month_S + 1) + "/" + nextMonthDays_S[i] + "/" + year_S);
                            string dateSpecial = 1 + "/" + nextMonthDays_S[i] + "/" + (year_S + 1);
                            
                            // Error handling for December
                            @* if(month + 1 == 13) { calendarItem = events.FirstOrDefault(n => n.Date == new DateTime(year + 1, 1, nextMonthDays[i])); }
                            else { calendarItem = events.FirstOrDefault(n => n.Date == new DateTime(year, month + 1, nextMonthDays[i])); } *@

                            if(month_S + 1 == 13) {
                                <li
                                    class="day @(selectedDate == dateSpecial ? "selected-date" : "")"
                                    id="@(dateSpecial)"
                                    @onclick="@( () => changeSelectedDate(dateSpecial) )"
                                >
                                    <span class="outsideMonth @(currentDate == dateSpecial ? "active" : "")">
                                        @nextMonthDays_S[i]
                                    </span>
                                    @* @if (calendarItem != null) {
                                        <span class="h">@calendarItem.Name</span>
                                    } *@
                                </li>
                            }
                            else {
                                <li
                                    class="day @(selectedDate == date ? "selected-date" : "")"
                                    id="@(date)"
                                    @onclick="@( () => changeSelectedDate(date) )"
                                >
                                    <span class="outsideMonth @(currentDate == date ? "active" : "")">
                                        @nextMonthDays_S[i]
                                    </span>
                                    @* @if (calendarItem != null) {
                                        <ul class="event-container">
                                            <li class="@calendarItem.eventType" />
                                            <li class="@calendarItem.eventType" />
                                        </ul>

                                        <span class="h">@calendarItem.Name</span>
                                    } *@
                                </li>
                            }    
                        }
                    }
                }
            </ul>
        </div>
    </div>

    @* Forecast *@
    <div class="section-10 forecast-container">
        <div class="forecast">Forecast</div>
        
        <div class="forecast-days">
            @for(int i = 0; i < 13; i++) {
                string dayName = DateTime.ParseExact(selectedDate, "d", null).AddDays(i).ToString("ddd");
                int dayNumber = DateTime.ParseExact(selectedDate, "d", null).AddDays(i).Day;

                // The first day of the forecast
                @if(i == 0) {
                    <div
                        class="section-1"
                        id="@DateTime.ParseExact(selectedDate, "d", null).AddDays(i).ToString("MM/dd/yyyy")"
                    >
                        <div class="day-name today">Today</div>
                        <div class="event-number">@forecastArray[i]</div>
                    </div>
                    
                }
                else {
                    <div
                        class="section-1"
                        id="@DateTime.ParseExact(selectedDate, "d", null).AddDays(i).ToString("MM/dd/yyyy")"
                    >
                        <div class="day-name">@dayName</div>
                        <div class="day-number">@dayNumber</div>
                        <div class="event-number">@forecastArray[i]</div>
                    </div>
                    
                }
            }
        </div>


        @* Display the list of events on the forecast days *@
        <div class="forecast-breakdown-container">
            <ul>
                @* Cycle through the days in the forecast *@
                @for(int i = 0; i < 13; i++) {
                    int t = i;
                    @* Find all the events in that day *@
                    IEnumerable<CalendarEvents>? eventsOnThisDay = events.Where(n => 
                        n.Date.ToShortDateString() == DateTime.ParseExact(selectedDate, "d", null).AddDays(i).ToString("d")  
                    );
                    if(eventsOnThisDay.Count() != 0) {
                        <li class="event-breakdown">
                            <span
                                class="calendar-arrow-icon arrow-down icon-size icon @(forecastMenus[t] ? "arrow-up" : "arrow-down")"
                                id="@i"
                                @onclick="@(() => toggleForecastList(t))"
                            />
                            <div class="event-date font-2"> @DateTime.ParseExact(selectedDate, "d", null).AddDays(i).ToString("ddd, MMM dd")</div>
                            
                            @foreach(CalendarEvents item in eventsOnThisDay) {
                                <div class="event-name font-1  @(forecastMenus[t] ? "closed" : "open") ">@item.Name</div>
                            }
                               
                        </li>
                    }
                }
            </ul>
        </div>
    </div>

    @* Notes *@
    <div class="section-5 notes-container text-center">
        Future use - Notes and Details
    </div>

</div>




@code {

    protected string selectedDate = "";

    @* Current Day value *@
    protected string currentDate = DateTime.Now.ToShortDateString();
    
    // Calendar Event Type
    protected record CalendarEvents(DateTime Date, string Name, string eventType);    

    // ----------- First Calendar Values ----------- 
    protected string monthName = "";
	DateTime monthEnd;
	protected int monthsAway = 0;
	protected int year = 0;
	protected int month = 0;
	List<CalendarEvents> events = new List<CalendarEvents>();

    // Previous Month Values
    protected int[] prevMonthDays = new int[7];
    // Next Month Values
    protected int[] nextMonthDays = new int[14];
    // Value to stop at the sixth week row
    protected int calendarLength = 0;


    // ----------- Second Calendar Values ----------- 
    protected string monthName_S = "";
	DateTime monthEnd_S;
	protected int monthsAway_S = 0;
	protected int year_S = 0;
	protected int month_S = 0;

    // Previous Month Values
    protected int[] prevMonthDays_S = new int[7];
    // Next Month Values
    protected int[] nextMonthDays_S = new int[14];
    // Value to stop at the sixth week row
    protected int calendarLength_S = 0;


    // ------------------- Functions ------------------- 

	protected override void OnInitialized() {
        // Compile all the events for the viewable time period - in Testing mode, so using more than the selectedDay range
		events.Add(new CalendarEvents(new DateTime(2025, 9, 21), "Test day 1", "venue-event"));
		events.Add(new CalendarEvents(new DateTime(2025, 8, 31), "Test day 2", "holiday"));
		events.Add(new CalendarEvents(new DateTime(2025, 9, 25), "Christmas", "birthday"));
		events.Add(new CalendarEvents(new DateTime(2025, 10, 1), "New Years", "important-event"));
        
        events.Add(new CalendarEvents(new DateTime(2025, 9, 21), "Test day 3", "venue-event"));
		events.Add(new CalendarEvents(new DateTime(2025, 9, 30), "Test day 4", "holiday"));
		events.Add(new CalendarEvents(new DateTime(2025, 9, 12), "Test Day 5", "birthday"));
		events.Add(new CalendarEvents(new DateTime(2025, 9, 16), "Test Day 6", "important-event"));

        // Create the calendars
		CreateFirstCalendar();
        CreateSecondCalendar();

        selectedDate = currentDate;
        // Create Forecast Section
        createForecast();
	}

    // Create and Update the First Calendar
	protected void CreateFirstCalendar() {
        // Create a temp data to get the month and year
		DateTime tempDate = DateTime.Now.AddMonths(monthsAway);
		month = tempDate.Month;
		year = tempDate.Year;

        // Set the start and end days for the month
		DateTime monthStart = new DateTime(year, month, 1);
		monthEnd = monthStart.AddMonths(1).AddDays(-1);
		monthName = monthStart.Month switch {
			1 => "January",
			2 => "February",
			3 => "March",
			4 => "April",
			5 => "May",
			6 => "June",
			7 => "July",
			8 => "August",
			9 => "September",
			10 => "October",
			11 => "November",
			12 => "December",
			_ => ""
		};

        calendarLength = DateTime.DaysInMonth(year, month);


        @* ---- This Section is for the days that will appear on the calendar outside the current month ---- *@
        // All values in the previous and next month dates need to be reset to 0 when changing months
        for(int i = 0; i < prevMonthDays.Length; i++) { prevMonthDays[i] = 0; }
        for(int i = 0; i < nextMonthDays.Length; i++) { nextMonthDays[i] = 0; }

        @* Previous Month Section *@

        // Get the previous month values
        int prevMonthLastDay = DateTime.DaysInMonth(year, monthEnd.Month);
        DateTime temp = new DateTime(year, monthEnd.Month, prevMonthLastDay);
        // If the current month is January, set the previous month to December of the previous year
        if(monthEnd.Month == 1) {
            prevMonthLastDay = DateTime.DaysInMonth(year - 1, 12);
            temp = new DateTime(year - 1, 12, prevMonthLastDay);
        }
        // If the current month is not January
        else {
            prevMonthLastDay = DateTime.DaysInMonth(year, monthEnd.Month - 1);
            temp = new DateTime(year, monthEnd.Month - 1, prevMonthLastDay);
        }
                
        // Get the last day of the previous month's day of week value (0-6)
        int prevMonthLastDayName = (int)temp.DayOfWeek;
        // Now set the values
        for(int i = 0; i <= prevMonthLastDayName; i++) {
            prevMonthDays[i] = prevMonthLastDay - i;
            if(prevMonthLastDay - i != 0) {
                calendarLength++;
            }
        }

        @* Next Month Section *@

        // If the current month is December, set the next month to January of next year
        DateTime temp2 = new DateTime(year, monthEnd.Month, 1);
        if(monthEnd.Month == 12) {
            temp2 = new DateTime(year + 1, 1, 1);
        }
        // If the current month is not December
        else {
            temp2 = new DateTime(year, monthEnd.Month + 1, 1);
        }
        
        // Get the next month values
        int nextMonthLastDayName = (int)temp2.DayOfWeek;
        // Now set the values
        for(int i = nextMonthLastDayName; i < 14; i++) {
            nextMonthDays[i - nextMonthLastDayName] = i - nextMonthLastDayName + 1;
        }

	}

    // Create and Update the Second Calendar
    protected void CreateSecondCalendar() {
        // Create a temp data to get the month and year
		DateTime tempDate = DateTime.Now.AddMonths(monthsAway_S + 1);
		
        month_S = tempDate.Month;
		year_S = tempDate.Year;

        // Set the start and end days for the month
		DateTime monthStart_S = new DateTime(year_S, month_S, 1);
		monthEnd_S = monthStart_S.AddMonths(1).AddDays(-1);
		monthName_S = monthStart_S.Month switch {
			1 => "January",
			2 => "February",
			3 => "March",
			4 => "April",
			5 => "May",
			6 => "June",
			7 => "July",
			8 => "August",
			9 => "September",
			10 => "October",
			11 => "November",
			12 => "December",
			_ => ""
		};

        calendarLength_S = DateTime.DaysInMonth(year_S, month_S);


        @* ---- This Section is for the days that will appear on the calendar outside the current month ---- *@
        // All values in the previous and next month dates need to be reset to 0 when changing months
        for(int i = 0; i < prevMonthDays_S.Length; i++) { prevMonthDays_S[i] = 0; }
        for(int i = 0; i < nextMonthDays_S.Length; i++) { nextMonthDays_S[i] = 0; }

        @* Previous Month Section *@

        // Get the previous month values
        int prevMonthLastDay_S = DateTime.DaysInMonth(year_S, monthEnd_S.Month);
        DateTime temp_S = new DateTime(year_S, monthEnd_S.Month, prevMonthLastDay_S);
        // If the current month is January, set the previous month to December of the previous year
        if(monthEnd_S.Month == 1) {
            prevMonthLastDay_S = DateTime.DaysInMonth(year_S - 1, 12);
            temp_S = new DateTime(year_S - 1, 12, prevMonthLastDay_S);
        }
        // If the current month is not January
        else {
            prevMonthLastDay_S = DateTime.DaysInMonth(year_S, monthEnd_S.Month - 1);
            temp_S = new DateTime(year_S, monthEnd_S.Month - 1, prevMonthLastDay_S);
        }
                
        // Get the last day of the previous month's day of week value (0-6)
        int prevMonthLastDayName_S = (int)temp_S.DayOfWeek;
        // Now set the values
        for(int i = 0; i <= prevMonthLastDayName_S; i++) {
            prevMonthDays_S[i] = prevMonthLastDay_S - i;
            if(prevMonthLastDay_S - i != 0) {
                calendarLength_S++;
            }
        }

        @* Next Month Section *@

        // If the current month is December, set the next month to January of next year
        DateTime temp2_S = new DateTime(year_S, monthEnd_S.Month, 1);
        if(monthEnd_S.Month == 12) {
            temp2_S = new DateTime(year_S + 1, 1, 1);
        }
        // If the current month is not December
        else {
            temp2_S = new DateTime(year_S, monthEnd_S.Month + 1, 1);
        }
        
        // Get the next month values
        int nextMonthLastDayName_S = (int)temp2_S.DayOfWeek;
        // Now set the values
        for(int i = nextMonthLastDayName_S; i < 14; i++) {
            nextMonthDays_S[i - nextMonthLastDayName_S] = i - nextMonthLastDayName_S + 1;
        }


	}
    
    // Changes the selected Date from the string gotten from the element
    protected void changeSelectedDate(string value) {
        @* Console.WriteLine(value); *@
        selectedDate = value;
        // Update the forecast details for the new selected date range
        createForecast();
    }

    int[] forecastArray = new int[13];

    // create the event forecast list
    protected void createForecast() {

        Array.Clear(forecastArray);

        foreach(CalendarEvents item in events) {
            for(int j = 0; j < forecastArray.Length; j++) {
                if(item.Date.ToString("MM/dd/yyyy") == DateTime.ParseExact(selectedDate, "d", null).AddDays(j).ToString("MM/dd/yyyy")) {
                    @* Console.WriteLine("True"); *@
                    forecastArray[j]++;
                    break;
                }
            }
        }
        
    }

    // Opens and Closes the forecast list
    bool[] forecastMenus = new bool [13];
    protected void toggleForecastList(int subMenuNumber) {
        forecastMenus[subMenuNumber] = !forecastMenus[subMenuNumber];
    }

}